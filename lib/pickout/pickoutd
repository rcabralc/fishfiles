#!/usr/bin/env python3
"""
Usage:
    pickoutd [--foreground] [--keep-stderr]
    pickoutd --kill

Description:
    This program starts a menu as a daemon.

Options:
    --foreground   Run attached to the terminal (don't daemonize).
    --keep-stderr  Don't close the stderr stream in the daemon process.
    --kill         Kill the daemon if already running, return 1 otherwise.
    -h, --help     Show this.
"""

from app import MenuApp
from docopt import docopt
from PyQt5.QtCore import QThread, QObject, pyqtSignal

import daemon
import json
import os
import socket
import sys


socket_file = '/tmp/pickout.sock'


class PromptCommand:
    def __init__(self, options, items):
        self._options = options
        self._items = items

    def execute(self, app, conn, logger):
        def done(result):
            if result:
                logger(f'result: {result}\n')
                conn.writeline(result)
            conn.close()
            app.hide()
        try:
            menu = app.setup(self._items, **self._options)
            menu.selected.connect(done)
        except:
            conn.close()
            raise

    def __repr__(self):
        return f'PROMPT with {len(self._items)} items: {self._options!r}'

    def serialize(self):
        options = json.dumps(self._options)
        items = '\n'.join(self._items)
        return f'PROMPT\n{options}\n{items}\n\n'.encode('utf-8')

    @classmethod
    def desserialize(cls, header, io):
        if header != 'PROMPT': return
        options = json.loads(io.readline().strip('\n'))
        item = io.readline().strip('\n')
        items = []
        while item:
            items.append(item)
            item = io.readline().strip('\n')
        return (cls, (options, items))


class KillCommand:
    def execute(self, app, conn, _logger):
        conn.close()
        app.quit()

    def __repr__(self):
        return 'KILL'

    def serialize(self):
        return b'KILL\n'

    @classmethod
    def desserialize(cls, header, io):
        return (cls, ()) if header == 'KILL' else None


class AppWorker(QObject):
    def __init__(self, app, logger):
        super(AppWorker, self).__init__()
        self._app = app
        self._logger = logger

    def execute(self, command, conn):
        command.execute(self._app, conn, self._logger)


class LinewiseConnection:
    def __init__(self, conn, separator=b'\n', encoding='utf-8'):
        self._conn = conn
        self._sep = separator
        self._encoding = encoding
        self._rbuffer = b''

    def readline(self, strip=False):
        message = self._rbuffer
        newline = message.find(self._sep)

        while not ~newline:
            chunk = self._conn.recv(4096)
            if not chunk:
                raise RuntimeError('socket connection broken')
            message += chunk
            newline = message.find(self._sep)

        newline += 1
        self._rbuffer = message[newline:]
        line = message[:newline]
        if strip:
            line = line.strip(self._sep)
        return line.decode(self._encoding)

    def writeline(self, message):
        message = message.encode(self._encoding)
        if not message.endswith(self._sep):
            message = message + self._sep
        self._conn.sendall(message)

    def close(self):
        self._conn.close()


class Channel(QObject):
    received = pyqtSignal(object, LinewiseConnection)

    def __init__(self, socket_file, logger):
        super(Channel, self).__init__()
        self._socket_file = socket_file
        self._logger = logger
        self._unlink()

    @classmethod
    def send(cls, command):
        if not os.path.exists(socket_file):
            return 1
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.connect(socket_file)
        sock.sendall(command.serialize())
        sock.close()
        return 0

    def receive(self):
        while True:
            conn, _ = self._sock.accept()
            conn = LinewiseConnection(conn)
            header = conn.readline(strip=True)
            for klass in [KillCommand, PromptCommand]:
                params = klass.desserialize(header, conn)
                if params is not None:
                    cls, args = params
                    command = cls(*args)
                    self._logger(f'received: {command!r}\n')
                    self.received.emit(command, conn)
                    break

    def __enter__(self):
        self._sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self._sock.bind(self._socket_file)
        self._sock.listen(1)
        self._logger('listening on ' + self._socket_file + '\n')
        return self

    def __exit__(self, type, value, traceback):
        self._logger('exiting\n')
        self._sock.close()
        self._unlink()

    def _unlink(self):
        try:
            os.unlink(self._socket_file)
        except OSError:
            if os.path.exists(self._socket_file):
                raise
        finally:
            self._sock = None


def run(logger):
    app = MenuApp()

    with Channel(socket_file, logger=logger) as channel:
        channel_thread = QThread()
        channel.moveToThread(channel_thread)
        channel_thread.started.connect(channel.receive)

        worker = AppWorker(app, logger=logger)
        channel.received.connect(worker.execute)

        app.finished.connect(channel_thread.exit)
        channel_thread.start()

        return app.exec_()


def main(args):
    foreground = args['--foreground']
    keep_stderr = args['--keep-stderr']

    if keep_stderr:
        stderr = sys.stderr
        log_stream = stderr
    else:
        stderr = None
        log_stream = None

    if args['--kill']:
        return sys.exit(Channel.send(KillCommand()))

    with daemon.DaemonContext(detach_process=not foreground,
                              stderr=stderr):
        run(make_logger(log_stream))


def make_logger(stream=None):
    if stream:
        def log(message):
            stream.write(message)
        return log

    return lambda message: None


if __name__ == '__main__':
    args = docopt(__doc__)
    main(args)
